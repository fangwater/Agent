// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IntrnlMsg.proto

#include "IntrnlMsg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace message {
namespace intrnl {
PROTOBUF_CONSTEXPR CommHeader::CommHeader(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sndrcmptid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sndrsubid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tgtcmpntid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tgtsubid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.msgsndngtm_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.msguuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sesnid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tpcnm_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.srcvid_)*/0
  , /*decltype(_impl_.msgsrcend_)*/0
  , /*decltype(_impl_.dplcf_)*/0
  , /*decltype(_impl_.tstmdf_)*/0} {}
struct CommHeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommHeaderDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommHeaderDefaultTypeInternal() {}
  union {
    CommHeader _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommHeaderDefaultTypeInternal _CommHeader_default_instance_;
PROTOBUF_CONSTEXPR IntrnlMsgData::IntrnlMsgData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.msgtype_)*/0
  , /*decltype(_impl_.msglen_)*/0} {}
struct IntrnlMsgDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IntrnlMsgDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IntrnlMsgDataDefaultTypeInternal() {}
  union {
    IntrnlMsgData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IntrnlMsgDataDefaultTypeInternal _IntrnlMsgData_default_instance_;
PROTOBUF_CONSTEXPR IntrnlMsgExtData::IntrnlMsgExtData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.datacnt_)*/0} {}
struct IntrnlMsgExtDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IntrnlMsgExtDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IntrnlMsgExtDataDefaultTypeInternal() {}
  union {
    IntrnlMsgExtData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IntrnlMsgExtDataDefaultTypeInternal _IntrnlMsgExtData_default_instance_;
PROTOBUF_CONSTEXPR IntrnlMsg::IntrnlMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.intrnmsgdata_)*/nullptr
  , /*decltype(_impl_.intrnlmsgextdata_)*/nullptr} {}
struct IntrnlMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IntrnlMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IntrnlMsgDefaultTypeInternal() {}
  union {
    IntrnlMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IntrnlMsgDefaultTypeInternal _IntrnlMsg_default_instance_;
}  // namespace intrnl
}  // namespace message
static ::_pb::Metadata file_level_metadata_IntrnlMsg_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_IntrnlMsg_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_IntrnlMsg_2eproto = nullptr;

const uint32_t TableStruct_IntrnlMsg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::message::intrnl::CommHeader, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::message::intrnl::CommHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::intrnl::CommHeader, _impl_.srcvid_),
  PROTOBUF_FIELD_OFFSET(::message::intrnl::CommHeader, _impl_.sndrcmptid_),
  PROTOBUF_FIELD_OFFSET(::message::intrnl::CommHeader, _impl_.sndrsubid_),
  PROTOBUF_FIELD_OFFSET(::message::intrnl::CommHeader, _impl_.tgtcmpntid_),
  PROTOBUF_FIELD_OFFSET(::message::intrnl::CommHeader, _impl_.tgtsubid_),
  PROTOBUF_FIELD_OFFSET(::message::intrnl::CommHeader, _impl_.msgsrcend_),
  PROTOBUF_FIELD_OFFSET(::message::intrnl::CommHeader, _impl_.msgsndngtm_),
  PROTOBUF_FIELD_OFFSET(::message::intrnl::CommHeader, _impl_.msguuid_),
  PROTOBUF_FIELD_OFFSET(::message::intrnl::CommHeader, _impl_.dplcf_),
  PROTOBUF_FIELD_OFFSET(::message::intrnl::CommHeader, _impl_.sesnid_),
  PROTOBUF_FIELD_OFFSET(::message::intrnl::CommHeader, _impl_.tpcnm_),
  PROTOBUF_FIELD_OFFSET(::message::intrnl::CommHeader, _impl_.tstmdf_),
  8,
  0,
  1,
  2,
  3,
  9,
  4,
  5,
  10,
  6,
  7,
  11,
  PROTOBUF_FIELD_OFFSET(::message::intrnl::IntrnlMsgData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::message::intrnl::IntrnlMsgData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::intrnl::IntrnlMsgData, _impl_.msgtype_),
  PROTOBUF_FIELD_OFFSET(::message::intrnl::IntrnlMsgData, _impl_.msglen_),
  PROTOBUF_FIELD_OFFSET(::message::intrnl::IntrnlMsgData, _impl_.data_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::message::intrnl::IntrnlMsgExtData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::message::intrnl::IntrnlMsgExtData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::intrnl::IntrnlMsgExtData, _impl_.datacnt_),
  0,
  PROTOBUF_FIELD_OFFSET(::message::intrnl::IntrnlMsg, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::message::intrnl::IntrnlMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::intrnl::IntrnlMsg, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::message::intrnl::IntrnlMsg, _impl_.intrnmsgdata_),
  PROTOBUF_FIELD_OFFSET(::message::intrnl::IntrnlMsg, _impl_.intrnlmsgextdata_),
  0,
  1,
  2,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 18, -1, sizeof(::message::intrnl::CommHeader)},
  { 30, 39, -1, sizeof(::message::intrnl::IntrnlMsgData)},
  { 42, 49, -1, sizeof(::message::intrnl::IntrnlMsgExtData)},
  { 50, 59, -1, sizeof(::message::intrnl::IntrnlMsg)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::message::intrnl::_CommHeader_default_instance_._instance,
  &::message::intrnl::_IntrnlMsgData_default_instance_._instance,
  &::message::intrnl::_IntrnlMsgExtData_default_instance_._instance,
  &::message::intrnl::_IntrnlMsg_default_instance_._instance,
};

const char descriptor_table_protodef_IntrnlMsg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017IntrnlMsg.proto\022\016message.intrnl\"\337\001\n\nCo"
  "mmHeader\022\016\n\006srcvId\030\001 \001(\005\022\022\n\nsndrCmptId\030\002"
  " \001(\t\022\021\n\tsndrSubId\030\003 \001(\t\022\022\n\ntgtCmpntId\030\004 "
  "\001(\t\022\020\n\010tgtSubId\030\005 \001(\t\022\021\n\tmsgSrcEnd\030\006 \001(\005"
  "\022\022\n\nmsgSndngTm\030\007 \001(\t\022\017\n\007msgUuid\030\010 \001(\t\022\r\n"
  "\005dplcF\030\t \001(\005\022\016\n\006sesnId\030\n \001(\t\022\r\n\005tpcNm\030\013 "
  "\001(\t\022\016\n\006tstMdF\030\014 \001(\005\">\n\rIntrnlMsgData\022\017\n\007"
  "msgType\030\001 \001(\005\022\016\n\006msgLen\030\002 \001(\005\022\014\n\004data\030\003 "
  "\001(\014\"#\n\020IntrnlMsgExtData\022\017\n\007dataCnt\030\001 \001(\005"
  "\"\250\001\n\tIntrnlMsg\022*\n\006header\030\001 \001(\0132\032.message"
  ".intrnl.CommHeader\0223\n\014intrnMsgData\030\002 \002(\013"
  "2\035.message.intrnl.IntrnlMsgData\022:\n\020Intrn"
  "lMsgExtData\030\003 \001(\0132 .message.intrnl.Intrn"
  "lMsgExtData"
  ;
static ::_pbi::once_flag descriptor_table_IntrnlMsg_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_IntrnlMsg_2eproto = {
    false, false, 531, descriptor_table_protodef_IntrnlMsg_2eproto,
    "IntrnlMsg.proto",
    &descriptor_table_IntrnlMsg_2eproto_once, nullptr, 0, 4,
    schemas, file_default_instances, TableStruct_IntrnlMsg_2eproto::offsets,
    file_level_metadata_IntrnlMsg_2eproto, file_level_enum_descriptors_IntrnlMsg_2eproto,
    file_level_service_descriptors_IntrnlMsg_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_IntrnlMsg_2eproto_getter() {
  return &descriptor_table_IntrnlMsg_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_IntrnlMsg_2eproto(&descriptor_table_IntrnlMsg_2eproto);
namespace message {
namespace intrnl {

// ===================================================================

class CommHeader::_Internal {
 public:
  using HasBits = decltype(std::declval<CommHeader>()._impl_._has_bits_);
  static void set_has_srcvid(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_sndrcmptid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sndrsubid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tgtcmpntid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_tgtsubid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_msgsrcend(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_msgsndngtm(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_msguuid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_dplcf(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_sesnid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_tpcnm(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_tstmdf(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

CommHeader::CommHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.intrnl.CommHeader)
}
CommHeader::CommHeader(const CommHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommHeader* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sndrcmptid_){}
    , decltype(_impl_.sndrsubid_){}
    , decltype(_impl_.tgtcmpntid_){}
    , decltype(_impl_.tgtsubid_){}
    , decltype(_impl_.msgsndngtm_){}
    , decltype(_impl_.msguuid_){}
    , decltype(_impl_.sesnid_){}
    , decltype(_impl_.tpcnm_){}
    , decltype(_impl_.srcvid_){}
    , decltype(_impl_.msgsrcend_){}
    , decltype(_impl_.dplcf_){}
    , decltype(_impl_.tstmdf_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sndrcmptid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sndrcmptid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sndrcmptid()) {
    _this->_impl_.sndrcmptid_.Set(from._internal_sndrcmptid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sndrsubid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sndrsubid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sndrsubid()) {
    _this->_impl_.sndrsubid_.Set(from._internal_sndrsubid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tgtcmpntid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tgtcmpntid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_tgtcmpntid()) {
    _this->_impl_.tgtcmpntid_.Set(from._internal_tgtcmpntid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tgtsubid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tgtsubid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_tgtsubid()) {
    _this->_impl_.tgtsubid_.Set(from._internal_tgtsubid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.msgsndngtm_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msgsndngtm_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_msgsndngtm()) {
    _this->_impl_.msgsndngtm_.Set(from._internal_msgsndngtm(), 
      _this->GetArenaForAllocation());
  }
  _impl_.msguuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msguuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_msguuid()) {
    _this->_impl_.msguuid_.Set(from._internal_msguuid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sesnid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sesnid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sesnid()) {
    _this->_impl_.sesnid_.Set(from._internal_sesnid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tpcnm_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tpcnm_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_tpcnm()) {
    _this->_impl_.tpcnm_.Set(from._internal_tpcnm(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.srcvid_, &from._impl_.srcvid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.tstmdf_) -
    reinterpret_cast<char*>(&_impl_.srcvid_)) + sizeof(_impl_.tstmdf_));
  // @@protoc_insertion_point(copy_constructor:message.intrnl.CommHeader)
}

inline void CommHeader::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sndrcmptid_){}
    , decltype(_impl_.sndrsubid_){}
    , decltype(_impl_.tgtcmpntid_){}
    , decltype(_impl_.tgtsubid_){}
    , decltype(_impl_.msgsndngtm_){}
    , decltype(_impl_.msguuid_){}
    , decltype(_impl_.sesnid_){}
    , decltype(_impl_.tpcnm_){}
    , decltype(_impl_.srcvid_){0}
    , decltype(_impl_.msgsrcend_){0}
    , decltype(_impl_.dplcf_){0}
    , decltype(_impl_.tstmdf_){0}
  };
  _impl_.sndrcmptid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sndrcmptid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sndrsubid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sndrsubid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tgtcmpntid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tgtcmpntid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tgtsubid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tgtsubid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.msgsndngtm_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msgsndngtm_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.msguuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msguuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sesnid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sesnid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tpcnm_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tpcnm_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CommHeader::~CommHeader() {
  // @@protoc_insertion_point(destructor:message.intrnl.CommHeader)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sndrcmptid_.Destroy();
  _impl_.sndrsubid_.Destroy();
  _impl_.tgtcmpntid_.Destroy();
  _impl_.tgtsubid_.Destroy();
  _impl_.msgsndngtm_.Destroy();
  _impl_.msguuid_.Destroy();
  _impl_.sesnid_.Destroy();
  _impl_.tpcnm_.Destroy();
}

void CommHeader::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:message.intrnl.CommHeader)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.sndrcmptid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.sndrsubid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.tgtcmpntid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.tgtsubid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.msgsndngtm_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.msguuid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.sesnid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.tpcnm_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&_impl_.srcvid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tstmdf_) -
        reinterpret_cast<char*>(&_impl_.srcvid_)) + sizeof(_impl_.tstmdf_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommHeader::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 srcvId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_srcvid(&has_bits);
          _impl_.srcvid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string sndrCmptId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_sndrcmptid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "message.intrnl.CommHeader.sndrCmptId");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string sndrSubId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_sndrsubid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "message.intrnl.CommHeader.sndrSubId");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string tgtCmpntId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_tgtcmpntid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "message.intrnl.CommHeader.tgtCmpntId");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string tgtSubId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_tgtsubid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "message.intrnl.CommHeader.tgtSubId");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 msgSrcEnd = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_msgsrcend(&has_bits);
          _impl_.msgsrcend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string msgSndngTm = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_msgsndngtm();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "message.intrnl.CommHeader.msgSndngTm");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string msgUuid = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_msguuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "message.intrnl.CommHeader.msgUuid");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 dplcF = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_dplcf(&has_bits);
          _impl_.dplcf_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string sesnId = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_sesnid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "message.intrnl.CommHeader.sesnId");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string tpcNm = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_tpcnm();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "message.intrnl.CommHeader.tpcNm");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 tstMdF = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_tstmdf(&has_bits);
          _impl_.tstmdf_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommHeader::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.intrnl.CommHeader)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 srcvId = 1;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_srcvid(), target);
  }

  // optional string sndrCmptId = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sndrcmptid().data(), static_cast<int>(this->_internal_sndrcmptid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "message.intrnl.CommHeader.sndrCmptId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_sndrcmptid(), target);
  }

  // optional string sndrSubId = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sndrsubid().data(), static_cast<int>(this->_internal_sndrsubid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "message.intrnl.CommHeader.sndrSubId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_sndrsubid(), target);
  }

  // optional string tgtCmpntId = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tgtcmpntid().data(), static_cast<int>(this->_internal_tgtcmpntid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "message.intrnl.CommHeader.tgtCmpntId");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_tgtcmpntid(), target);
  }

  // optional string tgtSubId = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tgtsubid().data(), static_cast<int>(this->_internal_tgtsubid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "message.intrnl.CommHeader.tgtSubId");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_tgtsubid(), target);
  }

  // optional int32 msgSrcEnd = 6;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_msgsrcend(), target);
  }

  // optional string msgSndngTm = 7;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_msgsndngtm().data(), static_cast<int>(this->_internal_msgsndngtm().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "message.intrnl.CommHeader.msgSndngTm");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_msgsndngtm(), target);
  }

  // optional string msgUuid = 8;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_msguuid().data(), static_cast<int>(this->_internal_msguuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "message.intrnl.CommHeader.msgUuid");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_msguuid(), target);
  }

  // optional int32 dplcF = 9;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_dplcf(), target);
  }

  // optional string sesnId = 10;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sesnid().data(), static_cast<int>(this->_internal_sesnid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "message.intrnl.CommHeader.sesnId");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_sesnid(), target);
  }

  // optional string tpcNm = 11;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tpcnm().data(), static_cast<int>(this->_internal_tpcnm().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "message.intrnl.CommHeader.tpcNm");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_tpcnm(), target);
  }

  // optional int32 tstMdF = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_tstmdf(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.intrnl.CommHeader)
  return target;
}

size_t CommHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.intrnl.CommHeader)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string sndrCmptId = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sndrcmptid());
    }

    // optional string sndrSubId = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sndrsubid());
    }

    // optional string tgtCmpntId = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tgtcmpntid());
    }

    // optional string tgtSubId = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tgtsubid());
    }

    // optional string msgSndngTm = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_msgsndngtm());
    }

    // optional string msgUuid = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_msguuid());
    }

    // optional string sesnId = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sesnid());
    }

    // optional string tpcNm = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tpcnm());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional int32 srcvId = 1;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_srcvid());
    }

    // optional int32 msgSrcEnd = 6;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_msgsrcend());
    }

    // optional int32 dplcF = 9;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_dplcf());
    }

    // optional int32 tstMdF = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tstmdf());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommHeader::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommHeader::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommHeader::GetClassData() const { return &_class_data_; }


void CommHeader::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommHeader*>(&to_msg);
  auto& from = static_cast<const CommHeader&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.intrnl.CommHeader)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_sndrcmptid(from._internal_sndrcmptid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_sndrsubid(from._internal_sndrsubid());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_tgtcmpntid(from._internal_tgtcmpntid());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_tgtsubid(from._internal_tgtsubid());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_msgsndngtm(from._internal_msgsndngtm());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_msguuid(from._internal_msguuid());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_set_sesnid(from._internal_sesnid());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_set_tpcnm(from._internal_tpcnm());
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.srcvid_ = from._impl_.srcvid_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.msgsrcend_ = from._impl_.msgsrcend_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.dplcf_ = from._impl_.dplcf_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.tstmdf_ = from._impl_.tstmdf_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommHeader::CopyFrom(const CommHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.intrnl.CommHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommHeader::IsInitialized() const {
  return true;
}

void CommHeader::InternalSwap(CommHeader* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sndrcmptid_, lhs_arena,
      &other->_impl_.sndrcmptid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sndrsubid_, lhs_arena,
      &other->_impl_.sndrsubid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tgtcmpntid_, lhs_arena,
      &other->_impl_.tgtcmpntid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tgtsubid_, lhs_arena,
      &other->_impl_.tgtsubid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msgsndngtm_, lhs_arena,
      &other->_impl_.msgsndngtm_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msguuid_, lhs_arena,
      &other->_impl_.msguuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sesnid_, lhs_arena,
      &other->_impl_.sesnid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tpcnm_, lhs_arena,
      &other->_impl_.tpcnm_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommHeader, _impl_.tstmdf_)
      + sizeof(CommHeader::_impl_.tstmdf_)
      - PROTOBUF_FIELD_OFFSET(CommHeader, _impl_.srcvid_)>(
          reinterpret_cast<char*>(&_impl_.srcvid_),
          reinterpret_cast<char*>(&other->_impl_.srcvid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommHeader::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_IntrnlMsg_2eproto_getter, &descriptor_table_IntrnlMsg_2eproto_once,
      file_level_metadata_IntrnlMsg_2eproto[0]);
}

// ===================================================================

class IntrnlMsgData::_Internal {
 public:
  using HasBits = decltype(std::declval<IntrnlMsgData>()._impl_._has_bits_);
  static void set_has_msgtype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_msglen(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

IntrnlMsgData::IntrnlMsgData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.intrnl.IntrnlMsgData)
}
IntrnlMsgData::IntrnlMsgData(const IntrnlMsgData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IntrnlMsgData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){}
    , decltype(_impl_.msgtype_){}
    , decltype(_impl_.msglen_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_data()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.msgtype_, &from._impl_.msgtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.msglen_) -
    reinterpret_cast<char*>(&_impl_.msgtype_)) + sizeof(_impl_.msglen_));
  // @@protoc_insertion_point(copy_constructor:message.intrnl.IntrnlMsgData)
}

inline void IntrnlMsgData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){}
    , decltype(_impl_.msgtype_){0}
    , decltype(_impl_.msglen_){0}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IntrnlMsgData::~IntrnlMsgData() {
  // @@protoc_insertion_point(destructor:message.intrnl.IntrnlMsgData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IntrnlMsgData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
}

void IntrnlMsgData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IntrnlMsgData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.intrnl.IntrnlMsgData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.data_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.msgtype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.msglen_) -
        reinterpret_cast<char*>(&_impl_.msgtype_)) + sizeof(_impl_.msglen_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IntrnlMsgData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 msgType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_msgtype(&has_bits);
          _impl_.msgtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 msgLen = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_msglen(&has_bits);
          _impl_.msglen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IntrnlMsgData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.intrnl.IntrnlMsgData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 msgType = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_msgtype(), target);
  }

  // optional int32 msgLen = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_msglen(), target);
  }

  // optional bytes data = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.intrnl.IntrnlMsgData)
  return target;
}

size_t IntrnlMsgData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.intrnl.IntrnlMsgData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes data = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_data());
    }

    // optional int32 msgType = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_msgtype());
    }

    // optional int32 msgLen = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_msglen());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IntrnlMsgData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IntrnlMsgData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IntrnlMsgData::GetClassData() const { return &_class_data_; }


void IntrnlMsgData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IntrnlMsgData*>(&to_msg);
  auto& from = static_cast<const IntrnlMsgData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.intrnl.IntrnlMsgData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_data(from._internal_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.msgtype_ = from._impl_.msgtype_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.msglen_ = from._impl_.msglen_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IntrnlMsgData::CopyFrom(const IntrnlMsgData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.intrnl.IntrnlMsgData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntrnlMsgData::IsInitialized() const {
  return true;
}

void IntrnlMsgData::InternalSwap(IntrnlMsgData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IntrnlMsgData, _impl_.msglen_)
      + sizeof(IntrnlMsgData::_impl_.msglen_)
      - PROTOBUF_FIELD_OFFSET(IntrnlMsgData, _impl_.msgtype_)>(
          reinterpret_cast<char*>(&_impl_.msgtype_),
          reinterpret_cast<char*>(&other->_impl_.msgtype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IntrnlMsgData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_IntrnlMsg_2eproto_getter, &descriptor_table_IntrnlMsg_2eproto_once,
      file_level_metadata_IntrnlMsg_2eproto[1]);
}

// ===================================================================

class IntrnlMsgExtData::_Internal {
 public:
  using HasBits = decltype(std::declval<IntrnlMsgExtData>()._impl_._has_bits_);
  static void set_has_datacnt(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

IntrnlMsgExtData::IntrnlMsgExtData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.intrnl.IntrnlMsgExtData)
}
IntrnlMsgExtData::IntrnlMsgExtData(const IntrnlMsgExtData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IntrnlMsgExtData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.datacnt_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.datacnt_ = from._impl_.datacnt_;
  // @@protoc_insertion_point(copy_constructor:message.intrnl.IntrnlMsgExtData)
}

inline void IntrnlMsgExtData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.datacnt_){0}
  };
}

IntrnlMsgExtData::~IntrnlMsgExtData() {
  // @@protoc_insertion_point(destructor:message.intrnl.IntrnlMsgExtData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IntrnlMsgExtData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IntrnlMsgExtData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IntrnlMsgExtData::Clear() {
// @@protoc_insertion_point(message_clear_start:message.intrnl.IntrnlMsgExtData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.datacnt_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IntrnlMsgExtData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 dataCnt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_datacnt(&has_bits);
          _impl_.datacnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IntrnlMsgExtData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.intrnl.IntrnlMsgExtData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 dataCnt = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_datacnt(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.intrnl.IntrnlMsgExtData)
  return target;
}

size_t IntrnlMsgExtData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.intrnl.IntrnlMsgExtData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 dataCnt = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_datacnt());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IntrnlMsgExtData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IntrnlMsgExtData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IntrnlMsgExtData::GetClassData() const { return &_class_data_; }


void IntrnlMsgExtData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IntrnlMsgExtData*>(&to_msg);
  auto& from = static_cast<const IntrnlMsgExtData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.intrnl.IntrnlMsgExtData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_datacnt()) {
    _this->_internal_set_datacnt(from._internal_datacnt());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IntrnlMsgExtData::CopyFrom(const IntrnlMsgExtData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.intrnl.IntrnlMsgExtData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntrnlMsgExtData::IsInitialized() const {
  return true;
}

void IntrnlMsgExtData::InternalSwap(IntrnlMsgExtData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.datacnt_, other->_impl_.datacnt_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IntrnlMsgExtData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_IntrnlMsg_2eproto_getter, &descriptor_table_IntrnlMsg_2eproto_once,
      file_level_metadata_IntrnlMsg_2eproto[2]);
}

// ===================================================================

class IntrnlMsg::_Internal {
 public:
  using HasBits = decltype(std::declval<IntrnlMsg>()._impl_._has_bits_);
  static const ::message::intrnl::CommHeader& header(const IntrnlMsg* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::message::intrnl::IntrnlMsgData& intrnmsgdata(const IntrnlMsg* msg);
  static void set_has_intrnmsgdata(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::message::intrnl::IntrnlMsgExtData& intrnlmsgextdata(const IntrnlMsg* msg);
  static void set_has_intrnlmsgextdata(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::message::intrnl::CommHeader&
IntrnlMsg::_Internal::header(const IntrnlMsg* msg) {
  return *msg->_impl_.header_;
}
const ::message::intrnl::IntrnlMsgData&
IntrnlMsg::_Internal::intrnmsgdata(const IntrnlMsg* msg) {
  return *msg->_impl_.intrnmsgdata_;
}
const ::message::intrnl::IntrnlMsgExtData&
IntrnlMsg::_Internal::intrnlmsgextdata(const IntrnlMsg* msg) {
  return *msg->_impl_.intrnlmsgextdata_;
}
IntrnlMsg::IntrnlMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.intrnl.IntrnlMsg)
}
IntrnlMsg::IntrnlMsg(const IntrnlMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IntrnlMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.intrnmsgdata_){nullptr}
    , decltype(_impl_.intrnlmsgextdata_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::message::intrnl::CommHeader(*from._impl_.header_);
  }
  if (from._internal_has_intrnmsgdata()) {
    _this->_impl_.intrnmsgdata_ = new ::message::intrnl::IntrnlMsgData(*from._impl_.intrnmsgdata_);
  }
  if (from._internal_has_intrnlmsgextdata()) {
    _this->_impl_.intrnlmsgextdata_ = new ::message::intrnl::IntrnlMsgExtData(*from._impl_.intrnlmsgextdata_);
  }
  // @@protoc_insertion_point(copy_constructor:message.intrnl.IntrnlMsg)
}

inline void IntrnlMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.intrnmsgdata_){nullptr}
    , decltype(_impl_.intrnlmsgextdata_){nullptr}
  };
}

IntrnlMsg::~IntrnlMsg() {
  // @@protoc_insertion_point(destructor:message.intrnl.IntrnlMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IntrnlMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.intrnmsgdata_;
  if (this != internal_default_instance()) delete _impl_.intrnlmsgextdata_;
}

void IntrnlMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IntrnlMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:message.intrnl.IntrnlMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.intrnmsgdata_ != nullptr);
      _impl_.intrnmsgdata_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.intrnlmsgextdata_ != nullptr);
      _impl_.intrnlmsgextdata_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IntrnlMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .message.intrnl.CommHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .message.intrnl.IntrnlMsgData intrnMsgData = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_intrnmsgdata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .message.intrnl.IntrnlMsgExtData IntrnlMsgExtData = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_intrnlmsgextdata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IntrnlMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.intrnl.IntrnlMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .message.intrnl.CommHeader header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // required .message.intrnl.IntrnlMsgData intrnMsgData = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::intrnmsgdata(this),
        _Internal::intrnmsgdata(this).GetCachedSize(), target, stream);
  }

  // optional .message.intrnl.IntrnlMsgExtData IntrnlMsgExtData = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::intrnlmsgextdata(this),
        _Internal::intrnlmsgextdata(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.intrnl.IntrnlMsg)
  return target;
}

size_t IntrnlMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.intrnl.IntrnlMsg)
  size_t total_size = 0;

  // required .message.intrnl.IntrnlMsgData intrnMsgData = 2;
  if (_internal_has_intrnmsgdata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.intrnmsgdata_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .message.intrnl.CommHeader header = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  // optional .message.intrnl.IntrnlMsgExtData IntrnlMsgExtData = 3;
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.intrnlmsgextdata_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IntrnlMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IntrnlMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IntrnlMsg::GetClassData() const { return &_class_data_; }


void IntrnlMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IntrnlMsg*>(&to_msg);
  auto& from = static_cast<const IntrnlMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.intrnl.IntrnlMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_header()->::message::intrnl::CommHeader::MergeFrom(
          from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_intrnmsgdata()->::message::intrnl::IntrnlMsgData::MergeFrom(
          from._internal_intrnmsgdata());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_intrnlmsgextdata()->::message::intrnl::IntrnlMsgExtData::MergeFrom(
          from._internal_intrnlmsgextdata());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IntrnlMsg::CopyFrom(const IntrnlMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.intrnl.IntrnlMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntrnlMsg::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void IntrnlMsg::InternalSwap(IntrnlMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IntrnlMsg, _impl_.intrnlmsgextdata_)
      + sizeof(IntrnlMsg::_impl_.intrnlmsgextdata_)
      - PROTOBUF_FIELD_OFFSET(IntrnlMsg, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IntrnlMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_IntrnlMsg_2eproto_getter, &descriptor_table_IntrnlMsg_2eproto_once,
      file_level_metadata_IntrnlMsg_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace intrnl
}  // namespace message
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::message::intrnl::CommHeader*
Arena::CreateMaybeMessage< ::message::intrnl::CommHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::intrnl::CommHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::message::intrnl::IntrnlMsgData*
Arena::CreateMaybeMessage< ::message::intrnl::IntrnlMsgData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::intrnl::IntrnlMsgData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::intrnl::IntrnlMsgExtData*
Arena::CreateMaybeMessage< ::message::intrnl::IntrnlMsgExtData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::intrnl::IntrnlMsgExtData >(arena);
}
template<> PROTOBUF_NOINLINE ::message::intrnl::IntrnlMsg*
Arena::CreateMaybeMessage< ::message::intrnl::IntrnlMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::intrnl::IntrnlMsg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
